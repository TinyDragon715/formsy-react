(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"./specs/Element-spec.js":[function(require,module,exports){
var Formsy = require('./../src/main.js');

describe('Element', function() {

  it('should return passed and setValue() value when using getValue()', function () {
    
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, null, 
        React.createElement(TestInput, {name: "foo", value: "foo"})
      )
    );

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    expect(input.getDOMNode().value).toBe('foo');
    TestUtils.Simulate.change(input, {target: {value: 'foobar'}});
    expect(input.getDOMNode().value).toBe('foobar');

  });

  it('should set back to pristine value when running reset', function () {
    
    var reset = null;
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      componentDidMount: function () {
        reset = this.resetValue;
      },
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, null, 
        React.createElement(TestInput, {name: "foo", value: "foo"})
      )
    );

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    TestUtils.Simulate.change(input, {target: {value: 'foobar'}});
    reset();
    expect(input.getDOMNode().value).toBe('foo');

  });

  it('should return error message passed when calling getErrorMessage()', function () {
    
    var getErrorMessage = null;
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      componentDidMount: function () {
        getErrorMessage = this.getErrorMessage;
      },
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, null, 
        React.createElement(TestInput, {name: "foo", value: "foo", validations: "isEmail", validationError: "Has to be email"})
      )
    );

    expect(getErrorMessage()).toBe('Has to be email');

  });

  it('should return server error message when calling getErrorMessage()', function (done) {
    
    jasmine.Ajax.install();

    var getErrorMessage = null;
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      componentDidMount: function () {
        getErrorMessage = this.getErrorMessage;
      },
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users"}, 
        React.createElement(TestInput, {name: "foo", value: "foo", validations: "isEmail", validationError: "Has to be email"})
      )
    );

    var form = TestUtils.Simulate.submit(form.getDOMNode());

    jasmine.Ajax.requests.mostRecent().respondWith({
      status: 500,
      contentType: 'application/json',
      responseText: '{"foo": "bar"}'
    })

    setTimeout(function () {
      expect(getErrorMessage()).toBe('bar');
      jasmine.Ajax.uninstall();
      done();
    }, 0);

  });

  it('should return true or false when calling isValid() depending on valid state', function () {
    
    var isValid = null;
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      componentDidMount: function () {
        isValid = this.isValid;
      },
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users"}, 
        React.createElement(TestInput, {name: "foo", value: "foo", validations: "isEmail"})
      )
    );

    expect(isValid()).toBe(false);
    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    TestUtils.Simulate.change(input, {target: {value: 'foo@foo.com'}});
    expect(isValid()).toBe(true);

  });

  it('should return true or false when calling isRequired() depending on passed required attribute', function () {
    
    var isRequireds = [];
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      componentDidMount: function () {
        isRequireds.push(this.isRequired);
      },
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users"}, 
        React.createElement(TestInput, {name: "foo", value: "foo"}), 
        React.createElement(TestInput, {name: "foo", value: "foo", required: true})
      )
    );

    expect(isRequireds[0]()).toBe(false);
    expect(isRequireds[1]()).toBe(true);

  });

  it('should return true or false when calling showRequired() depending on input being empty and required is passed, or not', function () {
    
    var showRequireds = [];
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      componentDidMount: function () {
        showRequireds.push(this.showRequired);
      },
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users"}, 
        React.createElement(TestInput, {name: "A", value: "foo"}), 
        React.createElement(TestInput, {name: "B", value: "", required: true}), 
        React.createElement(TestInput, {name: "C", value: ""})
      )
    );

    expect(showRequireds[0]()).toBe(false);
    expect(showRequireds[1]()).toBe(true);
    expect(showRequireds[2]()).toBe(false);

  });

  it('should return true or false when calling showError() depending on value is invalid or a server error has arrived, or not', function (done) {

    var showError = null;
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      componentDidMount: function () {
        showError = this.showError;
      },
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users"}, 
        React.createElement(TestInput, {name: "foo", value: "foo", validations: "isEmail", validationError: "This is not an email"})
      )
    );

    expect(showError()).toBe(true);

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    TestUtils.Simulate.change(input, {target: {value: 'foo@foo.com'}});
    expect(showError()).toBe(false);

    jasmine.Ajax.install();
    TestUtils.Simulate.submit(form.getDOMNode());    
    jasmine.Ajax.requests.mostRecent().respondWith({
      status: 500,
      responseType: 'application/json',
      responseText: '{"foo": "Email already exists"}'
    });
    setTimeout(function () {
      expect(showError()).toBe(true);
      jasmine.Ajax.uninstall();
      done();
    }, 0);
  });

  it('should return true or false when calling isPristine() depending on input has been "touched" or not', function () {
    
    var isPristine = null;
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      componentDidMount: function () {
        isPristine = this.isPristine;
      },
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users"}, 
        React.createElement(TestInput, {name: "A", value: "foo"})
      )
    );

    expect(isPristine()).toBe(true);
    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    TestUtils.Simulate.change(input, {target: {value: 'foo'}});
    expect(isPristine()).toBe(false);
    
  });

it('should allow an undefined value to be updated to a value', function (done) {
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      render: function () {
        return React.createElement("input", {value: this.getValue()})
      }
    });
    var TestForm = React.createClass({displayName: "TestForm",
      getInitialState: function () {
        return {value: undefined};
      },
      changeValue: function () {
        this.setState({
          value: 'foo'
        });
      },
      render: function () {
        return (
          React.createElement(Formsy.Form, {url: "/users"}, 
            React.createElement(TestInput, {name: "A", value: this.state.value})
          )
        );
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(TestForm, null)
    );

    form.changeValue();
    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    setTimeout(function () {
      expect(input.getDOMNode().value).toBe('foo');
      done();
    }, 0);
  });  

  it('should be able to dynamically change validations', function (done) {

    var isInvalid = false;
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      render: function () {
        return React.createElement("input", {value: this.getValue()})
      }
    });
    var TestForm = React.createClass({displayName: "TestForm",
      getInitialState: function () {
        return {value: 'foo@bar.com', validations: 'isEmail'};
      },
      changeValidations: function () {
        this.setState({
          validations: 'equals:foo'
        });
      },
      setInvalid: function () {
        console.log('Running it!');
        isInvalid = true;
      },
      render: function () {
        return (
          React.createElement(Formsy.Form, {url: "/users", onInvalid: this.setInvalid}, 
            React.createElement(TestInput, {name: "A", validations: this.state.validations, value: this.state.value})
          )
        );
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(TestForm, null)
    );

    form.changeValidations();
    setTimeout(function () {
      expect(isInvalid).toBe(true);
      done();
    }, 0);
  });  

  it('should be able to test a values validity', function () {

    var isInvalid = false;
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      render: function () {
        return React.createElement("input", {value: this.getValue()})
      }
    });
    var TestForm = React.createClass({displayName: "TestForm",
      render: function () {
        return (
          React.createElement(Formsy.Form, null, 
            React.createElement(TestInput, {name: "A", validations: "isEmail"})
          )
        );
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(TestForm, null)
    );

    var input = TestUtils.findRenderedComponentWithType(form, TestInput);
    expect(input.isValidValue('foo@bar.com')).toBe(true);
    expect(input.isValidValue('foo@bar')).toBe(false);

  }); 

});



},{"./../src/main.js":"/Users/christianalfoni/Documents/dev/formsy-react/src/main.js"}],"./specs/Formsy-spec.js":[function(require,module,exports){
var Formsy = require('./../src/main.js');

describe('Formsy', function () {

  describe('Setting up a form', function () {

    it('should render a form into the document', function () {
      var form = TestUtils.renderIntoDocument( React.createElement(Formsy.Form, null));
      expect(form.getDOMNode().tagName).toEqual('FORM');
    });

    it('should set a class name if passed', function () {
      var form = TestUtils.renderIntoDocument( React.createElement(Formsy.Form, {className: "foo"}));
      expect(form.getDOMNode().className).toEqual('foo');
    });

    it('should allow for null/undefined children', function (done) {
      var TestInput = React.createClass({displayName: "TestInput",
        mixins: [Formsy.Mixin],
        changeValue: function (event) {
          this.setValue(event.target.value);
        },
        render: function () {
          return React.createElement("input", {value: this.getValue(), onChange: this.changeValue})
        }
      });

      var model = null;
      var TestForm = React.createClass({displayName: "TestForm",
        onSubmit: function (formModel) {
          model = formModel;
        },
        render: function () {
          return (
            React.createElement(Formsy.Form, {onSubmit:  this.onSubmit}, 
              React.createElement("h1", null, "Test"), 
               null, 
               undefined, 
              React.createElement(TestInput, {name: "name", value:  'foo' })
            )
          );
        }
      });

      var form = TestUtils.renderIntoDocument(React.createElement(TestForm, null));
      setTimeout(function () {
        TestUtils.Simulate.submit(form.getDOMNode());
        expect(model).toEqual({name: 'foo'});
        done();
      }, 10);
    });

    it('should allow for inputs being added dynamically', function (done) {

      var inputs = [];
      var forceUpdate = null;
      var model = null;
      var TestInput = React.createClass({displayName: "TestInput",
        mixins: [Formsy.Mixin],
        render: function () {
          return React.createElement("div", null)
        }
      });
      var TestForm = React.createClass({displayName: "TestForm",
        componentWillMount: function () {
          forceUpdate = this.forceUpdate.bind(this);
        },
        onSubmit: function (formModel) {
          model = formModel;
        },
        render: function () {
          return ( 
            React.createElement(Formsy.Form, {onSubmit: this.onSubmit}, 
              inputs
            ));
        }
      });
      var form = TestUtils.renderIntoDocument( 
        React.createElement(TestForm, null) 
      );

      // Wait before adding the input
      setTimeout(function () {

        inputs.push(TestInput({
          name: 'test'
        }));

        forceUpdate(function () {

          // Wait for next event loop, as that does the form
          setTimeout(function () {
            TestUtils.Simulate.submit(form.getDOMNode());
            expect(model.test).toBeDefined();
            done();
          }, 0);

        });

      }, 10);

    });

    it('should allow dynamically added inputs to update the form-model', function (done) {

      var inputs = [];
      var forceUpdate = null;
      var model = null;
      var TestInput = React.createClass({displayName: "TestInput",
        mixins: [Formsy.Mixin],
        changeValue: function (event) {
          this.setValue(event.target.value);
        },
        render: function () {
          return React.createElement("input", {value: this.getValue(), onChange: this.changeValue})
        }
      });
      var TestForm = React.createClass({displayName: "TestForm",
        componentWillMount: function () {
          forceUpdate = this.forceUpdate.bind(this);
        },
        onSubmit: function (formModel) {
          model = formModel;
        },
        render: function () {
          return ( 
            React.createElement(Formsy.Form, {onSubmit: this.onSubmit}, 
              inputs
            ));
        }
      });
      var form = TestUtils.renderIntoDocument( 
        React.createElement(TestForm, null) 
      );

      // Wait before adding the input
      setTimeout(function () {

        inputs.push(TestInput({
          name: 'test'
        }));

        forceUpdate(function () {

          // Wait for next event loop, as that does the form
          setTimeout(function () {
            TestUtils.Simulate.change(TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT'), {target: {value: 'foo'}});
            TestUtils.Simulate.submit(form.getDOMNode());
            expect(model.test).toBe('foo');
            done();
          }, 0);

        });

      }, 0);

    });

    it('should allow a dynamically updated input to update the form-model', function (done) {

      var forceUpdate = null;
      var model = null;
      var TestInput = React.createClass({displayName: "TestInput",
        mixins: [Formsy.Mixin],
        changeValue: function (event) {
          this.setValue(event.target.value);
        },
        render: function () {
          return React.createElement("input", {value: this.getValue(), onChange: this.changeValue})
        }
      });

      var input;
      var TestForm = React.createClass({displayName: "TestForm",
        componentWillMount: function () {
          forceUpdate = this.forceUpdate.bind(this);
        },
        onSubmit: function (formModel) {
          model = formModel;
        },
        render: function () {
          input = React.createElement(TestInput, {name: "test", value:  this.props.value});

          return (
            React.createElement(Formsy.Form, {onSubmit: this.onSubmit}, 
              input
            ));
        }
      });
      var form = TestUtils.renderIntoDocument(React.createElement(TestForm, {value: "foo"}));

      // Wait before changing the input
      setTimeout(function () {
        form.setProps({value: 'bar'});

        forceUpdate(function () {
          // Wait for next event loop, as that does the form
          setTimeout(function () {
            TestUtils.Simulate.submit(form.getDOMNode());
            expect(model.test).toBe('bar');
            done();
          }, 0);

        });

      }, 10);

    });

    describe('validations', function() {
      var CheckValid, onSubmit, OtherCheckValid;
      var isValid;

      var TestInput = React.createClass({displayName: "TestInput",
        mixins: [Formsy.Mixin],
        changeValue: function (event) {
          this.setValue(event.target.value);
        },
        render: function () {
          return React.createElement("input", {value:  this.getValue(), onChange:  this.changeValue})
        }
      });

      var TestForm = React.createClass({displayName: "TestForm",
        getDefaultProps: function() {
          return {
            inputs: [],
          };
        },
        render: function () {
          var builtInputs = [];
          var inputs = this.props.inputs;
          for (var i=0; i < inputs.length; i++) {
            var input = inputs[i];
            builtInputs.push(React.createElement(TestInput, React.__spread({},   input , {key:  input.name})));
          }
          var _this = this;
          return React.createElement(Formsy.Form, {
            onSubmit:  function(arg1) { onSubmit(arg1); }, 
            onValid:  function() { isValid = true; }, 
            onInvalid:  function() { isValid = false; }}, 
             builtInputs 
          );
        }
      });

      beforeEach(function() {
        isValid = true;
        CheckValid = jasmine.createSpy('CheckValid');
        Formsy.addValidationRule('CheckValid', CheckValid);
        OtherCheckValid = jasmine.createSpy('CheckValid');
        Formsy.addValidationRule('OtherCheckValid', OtherCheckValid);
        onSubmit = jasmine.createSpy('onSubmit');
      });

      it('should run when the input changes', function() {
        var form = TestUtils.renderIntoDocument(React.createElement(TestForm, {inputs:  [{name: 'one', validations: 'CheckValid', value: 'foo'}] }));
        var input = TestUtils.findRenderedDOMComponentWithTag(form, 'input');
        TestUtils.Simulate.change(input.getDOMNode(), {target: {value: 'bar'}});
        expect(CheckValid).toHaveBeenCalledWith('bar');
        expect(OtherCheckValid).not.toHaveBeenCalled();
      });

      it('should allow the validation to be changed', function() {
        var form = TestUtils.renderIntoDocument(React.createElement(TestForm, {inputs:  [{name: 'one', validations: 'CheckValid', value: 'foo'}] }));
        form.setProps({inputs: [{name: 'one', validations: 'OtherCheckValid', value: 'foo'}] });
        var input = TestUtils.findRenderedDOMComponentWithTag(form, 'input');
        TestUtils.Simulate.change(input.getDOMNode(), {target: {value: 'bar'}});
        expect(OtherCheckValid).toHaveBeenCalledWith('bar');
      });

      it('should invalidate a form if dynamically inserted input is invalid', function(done) {
        var form = TestUtils.renderIntoDocument(React.createElement(TestForm, {inputs:  [{name: 'one', validations: 'isEmail', value: 'foo@bar.com'}] }));
        expect(isValid).toEqual(true);
        form.setProps({inputs: [
          {name: 'one', validations: 'isEmail', value: 'foo@bar.com'},
          {name: 'two', validations: 'isEmail', value: 'foo@bar'},
        ]}, function() {
          setTimeout(function() {
            expect(isValid).toEqual(false);
            done();
          }, 0);
        });
      });

      it('should validate a form when removing an invalid input', function(done) {
        var form = TestUtils.renderIntoDocument(React.createElement(TestForm, {inputs:  [
          {name: 'one', validations: 'isEmail', value: 'foo@bar.com'},
          {name: 'two', validations: 'isEmail', value: 'foo@bar'},
        ] }));
        expect(isValid).toEqual(false);
        form.setProps({inputs: [{name: 'one', validations: 'isEmail', value: 'foo@bar.com'}]}, function() {
          setTimeout(function() {
            expect(isValid).toEqual(true);
            done();
          }, 0);
        });
      });

      it('runs multiple validations', function() {
        var form = TestUtils.renderIntoDocument(React.createElement(TestForm, {inputs:  [{name: 'one', validations: 'CheckValid,OtherCheckValid', value: 'foo'}] }));
        var input = TestUtils.findRenderedDOMComponentWithTag(form, 'input');
        TestUtils.Simulate.change(input.getDOMNode(), {target: {value: 'bar'}});
        expect(CheckValid).toHaveBeenCalledWith('bar');
        expect(OtherCheckValid).toHaveBeenCalledWith('bar');
      });
    });

    it('should not trigger onChange when form is mounted', function () {
      var hasChanged = jasmine.createSpy('onChange');
      var TestForm = React.createClass({displayName: "TestForm",
        onChange: function () {
          hasChanged();
        },
        render: function () {
          return React.createElement(Formsy.Form, {onChange: this.onChange});
        }
      });
      var form = TestUtils.renderIntoDocument(React.createElement(TestForm, null));
      expect(hasChanged).not.toHaveBeenCalled();
    });

    it('should trigger onChange when form element is changed', function () {
      var hasChanged = jasmine.createSpy('onChange');
      var MyInput = React.createClass({displayName: "MyInput",
        mixins: [Formsy.Mixin],
        onChange: function (event) {
          this.setValue(event.target.value);
        },
        render: function () {
          return React.createElement("input", {value: this.getValue(), onChange: this.onChange})
        }
      });
      var TestForm = React.createClass({displayName: "TestForm",
        onChange: function () {
          hasChanged();
        },
        render: function () {
          return (
            React.createElement(Formsy.Form, {onChange: this.onChange}, 
              React.createElement(MyInput, {name: "foo"})
            )
          );
        }
      });
      var form = TestUtils.renderIntoDocument(React.createElement(TestForm, null));
      TestUtils.Simulate.change(TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT'), {target: {value: 'bar'}});
      expect(hasChanged).toHaveBeenCalled();
    });

    it('should trigger onChange when new input is added to form', function (done) {
      var hasChanged = jasmine.createSpy('onChange');
      var inputs = [];
      var forceUpdate = null;
      var TestInput = React.createClass({displayName: "TestInput",
        mixins: [Formsy.Mixin],
        changeValue: function (event) {
          this.setValue(event.target.value);
        },
        render: function () {
          return React.createElement("input", {value: this.getValue(), onChange: this.changeValue})
        }
      });
      var TestForm = React.createClass({displayName: "TestForm",
        componentWillMount: function () {
          forceUpdate = this.forceUpdate.bind(this);
        },
        onChange: function () {
          hasChanged();
        },
        render: function () {
          return ( 
            React.createElement(Formsy.Form, {onChange: this.onChange}, 
              inputs
            ));
        }
      });
      var form = TestUtils.renderIntoDocument( 
        React.createElement(TestForm, null) 
      );

      // Wait before adding the input
      inputs.push(TestInput({
        name: 'test'
      }));

      forceUpdate(function () {

        // Wait for next event loop, as that does the form
        setTimeout(function () {
          expect(hasChanged).toHaveBeenCalled();
          done();
        }, 0);

      });

    });

  });

  describe('Update a form', function () {

    it('should allow elements to check if the form is disabled', function (done) {

      var TestInput = React.createClass({displayName: "TestInput",
        mixins: [Formsy.Mixin],
        render: function () {
          return React.createElement("input", {value: this.getValue()})
        }
      });
      var TestForm = React.createClass({displayName: "TestForm",
        getInitialState: function () {
          return {disabled: true};
        },
        enableForm: function () {
          this.setState({
            disabled: false
          });
        },
        render: function () {
          return ( 
            React.createElement(Formsy.Form, {onChange: this.onChange, disabled: this.state.disabled}, 
              React.createElement(TestInput, {name: "foo"})
            ));
        }
      });
      var form = TestUtils.renderIntoDocument( 
        React.createElement(TestForm, null) 
      );

      var input = TestUtils.findRenderedComponentWithType(form, TestInput);
      expect(input.isFormDisabled()).toBe(true);
      form.enableForm();
      setTimeout(function () {
        expect(input.isFormDisabled()).toBe(false);
        done();
      }, 0);

    });

    it('should be possible to pass error state of elements by changing an errors attribute', function (done) {

      var TestInput = React.createClass({displayName: "TestInput",
        mixins: [Formsy.Mixin],
        render: function () {
          return React.createElement("input", {value: this.getValue()});
        }
      });
      var TestForm = React.createClass({displayName: "TestForm",
        getInitialState: function () {
          return {
            validationErrors: {
              foo: 'bar'
            }
          };
        },
        onChange: function (values) {
          if (values.foo) {
            this.setState({
              validationErrors: {}
            });
          } else {
            this.setState({
              validationErrors: {foo: 'bar'}
            });
          }
        },
        render: function () {
          return ( 
            React.createElement(Formsy.Form, {onChange: this.onChange, validationErrors: this.state.validationErrors}, 
              React.createElement(TestInput, {name: "foo"})
            ));
        }
      });
      var form = TestUtils.renderIntoDocument( 
        React.createElement(TestForm, null) 
      );

      // Wait for update
      setTimeout(function () {
        var input = TestUtils.findRenderedComponentWithType(form, TestInput);
        expect(input.getErrorMessage()).toBe('bar');
        input.setValue('gotValue');

        // Wait for update
        setTimeout(function () {
          expect(input.getErrorMessage()).toBe(null);
          done();
        }, 0);
      }, 0);

    });


    it('should trigger an onValidSubmit when submitting a valid form', function () {

        var isCalled = false;
        var TestInput = React.createClass({displayName: "TestInput",
          mixins: [Formsy.Mixin],
          render: function () {
            return React.createElement("input", {value: this.getValue()});
          }
        });
        var TestForm = React.createClass({displayName: "TestForm",
          onValidSubmit: function () {
            isCalled = true;
          },
          render: function () {
            return ( 
              React.createElement(Formsy.Form, {onValidSubmit: this.onValidSubmit}, 
                React.createElement(TestInput, {name: "foo", validations: "isEmail", value: "foo@bar.com"})
              ));
          }
        });
        var form = TestUtils.renderIntoDocument( 
          React.createElement(TestForm, null) 
        );

        var TestForm = TestUtils.findRenderedComponentWithType(form, TestForm);
        TestUtils.Simulate.submit(TestForm.getDOMNode());  
        expect(isCalled).toBe(true);

    });

    it('should trigger an onInvalidSubmit when submitting an invalid form', function () {

        var isCalled = false;
        var TestInput = React.createClass({displayName: "TestInput",
          mixins: [Formsy.Mixin],
          render: function () {
            return React.createElement("input", {value: this.getValue()});
          }
        });
        var TestForm = React.createClass({displayName: "TestForm",
          onInvalidSubmit: function () {
            isCalled = true;
          },
          render: function () {
            return ( 
              React.createElement(Formsy.Form, {onInvalidSubmit: this.onInvalidSubmit}, 
                React.createElement(TestInput, {name: "foo", validations: "isEmail", value: "foo@bar"})
              ));
          }
        });
        var form = TestUtils.renderIntoDocument( 
          React.createElement(TestForm, null) 
        );

        var TestForm = TestUtils.findRenderedComponentWithType(form, TestForm);
        TestUtils.Simulate.submit(TestForm.getDOMNode());  
        expect(isCalled).toBe(true);

    });

  });

  describe("value === false", function() {
    var onSubmit;
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      getDefaultProps: function() {
        return {
          type: "text",
        };
      },
      changeValue: function() {
        this.setValue(e.target[this.props.type === "checkbox" ? "checked" : "value"]);
      },
      render: function () {
        return React.createElement("input", {type:  this.props.type, value:  this.getValue(), onChange:  this.changeValue})
      }
    });

    var TestForm = React.createClass({displayName: "TestForm",
      render: function () {
        return (
          React.createElement(Formsy.Form, {onSubmit:  function(arg1) { onSubmit(arg1); }}, 
            React.createElement(TestInput, {name: "foo", value:  this.props.value, type: "checkbox"}), 
            React.createElement("button", {type: "submit"}, "Save")
          )
        );
      }
    });

    beforeEach(function() {
      onSubmit = jasmine.createSpy("onSubmit");
    });

    it("should call onSubmit correctly", function() {
      var form = TestUtils.renderIntoDocument(React.createElement(TestForm, {value:  false }));
      TestUtils.Simulate.submit(form.getDOMNode());
      expect(onSubmit).toHaveBeenCalledWith({foo: false});
    });

    it("should allow dynamic changes to false", function() {
      var form = TestUtils.renderIntoDocument(React.createElement(TestForm, {value:  true }));
      form.setProps({value: false});
      TestUtils.Simulate.submit(form.getDOMNode());
      expect(onSubmit).toHaveBeenCalledWith({foo: false});
    });
  });
});



},{"./../src/main.js":"/Users/christianalfoni/Documents/dev/formsy-react/src/main.js"}],"./specs/Submit-spec.js":[function(require,module,exports){
var Formsy = require('./../src/main.js');

describe('Ajax', function() {

  beforeEach(function () {
    jasmine.Ajax.install();
  });

  afterEach(function () {
    jasmine.Ajax.uninstall();
  });

  it('should post to a given url if passed', function () {

    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users"}
      )
    );
    
    TestUtils.Simulate.submit(form.getDOMNode());
    expect(jasmine.Ajax.requests.mostRecent().url).toBe('/users');
    expect(jasmine.Ajax.requests.mostRecent().method).toBe('POST');

  });

  it('should put to a given url if passed a method attribute', function () {

    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users", method: "PUT"}
      )
    );
    
    TestUtils.Simulate.submit(form.getDOMNode());
    expect(jasmine.Ajax.requests.mostRecent().url).toBe('/users');
    expect(jasmine.Ajax.requests.mostRecent().method).toBe('PUT');

  });

  it('should pass x-www-form-urlencoded as contentType when urlencoded is set as contentType', function () {

    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users", contentType: "urlencoded"}
      )
    );
    
    TestUtils.Simulate.submit(form.getDOMNode());
    expect(jasmine.Ajax.requests.mostRecent().contentType()).toBe('application/x-www-form-urlencoded');

  });

  it('should run an onSuccess handler, if passed and ajax is successfull. First argument is data from server', function (done) {
 
    var onSuccess = jasmine.createSpy("success");
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users", onSuccess: onSuccess}
      )
    );
    
    jasmine.Ajax.stubRequest('/users').andReturn({
      status: 200,
      contentType: 'application/json',
      responseText: '{}'
    });

    TestUtils.Simulate.submit(form.getDOMNode());

    // Since ajax is returned as a promise (async), move assertion
    // to end of event loop
    setTimeout(function () {
      expect(onSuccess).toHaveBeenCalledWith({});
      done();
    }, 0);

  });

  it('should not do ajax request if onSubmit handler is passed, but pass the model as first argument to onSubmit handler', function () {
    
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      render: function () {
        return React.createElement("input", {value: this.getValue()})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {onSubmit: onSubmit}, 
        React.createElement(TestInput, {name: "foo", value: "bar"})
      )
    );

    TestUtils.Simulate.submit(form.getDOMNode());

    expect(jasmine.Ajax.requests.count()).toBe(0);

    function onSubmit (data) {
      expect(data).toEqual({
        foo: 'bar'
      });
    }

  });

  it('should trigger an onSubmitted handler, if passed and the submit has responded with SUCCESS', function (done) {
    
    var onSubmitted = jasmine.createSpy("submitted");
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users", onSubmitted: onSubmitted}
      )
    );
    
    jasmine.Ajax.stubRequest('/users').andReturn({
      status: 200,
      contentType: 'application/json',
      responseText: '{}'
    });

    TestUtils.Simulate.submit(form.getDOMNode());

    // Since ajax is returned as a promise (async), move assertion
    // to end of event loop
    setTimeout(function () {
      expect(onSubmitted).toHaveBeenCalled();
      done();
    }, 0);

  });

  it('should trigger an onSubmitted handler, if passed and the submit has responded with ERROR', function (done) {
    
    var onSubmitted = jasmine.createSpy("submitted");
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users", onSubmitted: onSubmitted}
      )
    );
    
    jasmine.Ajax.stubRequest('/users').andReturn({
      status: 500,
      contentType: 'application/json',
      responseText: '{}'
    });

    TestUtils.Simulate.submit(form.getDOMNode());

    // Since ajax is returned as a promise (async), move assertion
    // to end of event loop
    setTimeout(function () {
      expect(onSubmitted).toHaveBeenCalled();
      done();
    }, 0);

  });

  it('should trigger an onError handler, if passed and the submit has responded with ERROR', function (done) {
    
    var onError = jasmine.createSpy("error");
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {url: "/users", onError: onError}
      )
    );
    
    // Do not return any error because there are no inputs
    jasmine.Ajax.stubRequest('/users').andReturn({
      status: 500,
      contentType: 'application/json',
      responseText: '{}'
    });

    TestUtils.Simulate.submit(form.getDOMNode());

    // Since ajax is returned as a promise (async), move assertion
    // to end of event loop
    setTimeout(function () {
      expect(onError).toHaveBeenCalledWith({});
      done();
    }, 0);

  });

});



},{"./../src/main.js":"/Users/christianalfoni/Documents/dev/formsy-react/src/main.js"}],"./specs/Validation-spec.js":[function(require,module,exports){
var Formsy = require('./../src/main.js');

describe('Validation', function() {

  it('should trigger an onValid handler, if passed, when form is valid', function () {

    var onValid = jasmine.createSpy('valid');
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {onValid: onValid}, 
        React.createElement(TestInput, {name: "foo", required: true})
      )
    );

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    TestUtils.Simulate.change(input, {target: {value: 'foo'}});
    expect(onValid).toHaveBeenCalled();

  });

  it('should trigger an onInvalid handler, if passed, when form is invalid', function () {

    var onInvalid = jasmine.createSpy('invalid');
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, {onValid: onInvalid}, 
        React.createElement(TestInput, {name: "foo", value: "foo"})
      )
    );

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    TestUtils.Simulate.change(input, {target: {value: ''}});
    expect(onInvalid).toHaveBeenCalled();

  });

  it('should use provided checkValidity function', function () {

    var isValid = jasmine.createSpy('valid');
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        if (this.isValid()) {
          isValid();
        }
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      },
      checkValidity: function () {
        return this.getValue() === "checkValidity";
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, null, 
        React.createElement(TestInput, {name: "foo", value: "checkInvalidity"})
      )
    );

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    expect(isValid).not.toHaveBeenCalled();
    TestUtils.Simulate.change(input, {target: {value: 'checkValidity'}});
    expect(isValid).toHaveBeenCalled();

  });

  it('RULE: isEmail', function () {

    var isValid = jasmine.createSpy('valid');
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        if (this.isValid()) {
          isValid();
        }
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, null, 
        React.createElement(TestInput, {name: "foo", value: "foo", validations: "isEmail"})
      )
    );

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    expect(isValid).not.toHaveBeenCalled();
    TestUtils.Simulate.change(input, {target: {value: 'foo@foo.com'}});
    expect(isValid).toHaveBeenCalled();

  });

  it('RULE: isNumeric', function () {

    var isValid = jasmine.createSpy('valid');
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        if (this.isValid()) {
          isValid();
        }
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, null, 
        React.createElement(TestInput, {name: "foo", value: "foo", validations: "isNumeric"})
      )
    );

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    expect(isValid).not.toHaveBeenCalled();
    TestUtils.Simulate.change(input, {target: {value: '123'}});
    expect(isValid).toHaveBeenCalled();

  });

  it('RULE: isNumeric (actual number)', function () {

    var isValid = jasmine.createSpy('valid');
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      updateValue: function (event) {
        this.setValue(Number(event.target.value));
      },
      render: function () {
        if (this.isValid()) {
          isValid();
        }
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, null, 
        React.createElement(TestInput, {name: "foo", value: "foo", validations: "isNumeric"})
      )
    );

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    expect(isValid).not.toHaveBeenCalled();
    TestUtils.Simulate.change(input, {target: {value: '123'}});
    expect(isValid).toHaveBeenCalled();

  });

  it('RULE: isNumeric (string representation of a float)', function () {

    var isValid = jasmine.createSpy('valid');
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        if (this.isValid()) {
          isValid();
        }
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, null, 
        React.createElement(TestInput, {name: "foo", value: "foo", validations: "isNumeric"})
      )
    );

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    expect(isValid).not.toHaveBeenCalled();
    TestUtils.Simulate.change(input, {target: {value: '1.5'}});
    expect(isValid).toHaveBeenCalled();

  });

  it('RULE: isNumeric is false (string representation of an invalid float)', function () {

    var isValid = jasmine.createSpy('valid');
    var TestInput = React.createClass({displayName: "TestInput",
      mixins: [Formsy.Mixin],
      updateValue: function (event) {
        this.setValue(event.target.value);
      },
      render: function () {
        if (this.isValid()) {
          isValid();
        }
        return React.createElement("input", {value: this.getValue(), onChange: this.updateValue})
      }
    });
    var form = TestUtils.renderIntoDocument(
      React.createElement(Formsy.Form, null, 
        React.createElement(TestInput, {name: "foo", value: "foo", validations: "isNumeric"})
      )
    );

    var input = TestUtils.findRenderedDOMComponentWithTag(form, 'INPUT');
    expect(isValid).not.toHaveBeenCalled();
    TestUtils.Simulate.change(input, {target: {value: '1.'}});
    expect(isValid).not.toHaveBeenCalled();

  });

});



},{"./../src/main.js":"/Users/christianalfoni/Documents/dev/formsy-react/src/main.js"}],"/Users/christianalfoni/Documents/dev/formsy-react/src/Mixin.js":[function(require,module,exports){
module.exports = {
  getInitialState: function () {
    var value = 'value' in this.props ? this.props.value : '';
    return {
      _value: value,
      _isValid: true,
      _isPristine: true,
      _pristineValue: value
    };
  },
  componentWillMount: function () {

    var configure = function () {
      this.setValidations(this.props.validations, this.props.required);
      this.props._attachToForm(this);
    }.bind(this);

    if (!this.props.name) {
      throw new Error('Form Input requires a name property when used');
    }

    if (!this.props._attachToForm) {
      return setTimeout(function () {
        if (!this.isMounted()) return;
        if (!this.props._attachToForm) {
          throw new Error('Form Mixin requires component to be nested in a Form');
        }
        configure();
      }.bind(this), 0);
    }
    configure();

  },

  // We have to make the validate method is kept when new props are added
  componentWillReceiveProps: function (nextProps) {
    nextProps._attachToForm = this.props._attachToForm;
    nextProps._detachFromForm = this.props._detachFromForm;
    nextProps._validate = this.props._validate;
    this.setValidations(nextProps.validations, nextProps.required);
  },

  componentDidUpdate: function (prevProps, prevState) {

    var isValueChanged = function () {
      
      return (
        this.props.value !== prevProps.value && (
          this.state._value === prevProps.value ||

          // Since undefined is converted to empty string we have to
          // check that specifically
          (this.state._value === '' && prevProps.value === undefined)
        )
      );

    }.bind(this);


    // If validations has changed or something outside changes 
    // the value, set the value again running a validation

    if (prevProps.validations !== this.props.validations || isValueChanged()) {
      var value = 'value' in this.props ? this.props.value : '';
      this.setValue(value);
    }
  },

  // Detach it when component unmounts
  componentWillUnmount: function () {
    this.props._detachFromForm(this);
  },

  setValidations: function (validations, required) {

    // Add validations to the store itself as the props object can not be modified
    this._validations = validations || '';

    if (required) {
      this._validations = validations ? validations + ',' : '';
      this._validations += 'isValue';
    }

  },

  // We validate after the value has been set
  setValue: function (value) {
    this.setState({
      _value: value,
      _isPristine: false
    }, function () {
      this.props._validate(this);
    }.bind(this));
  },
  resetValue: function () {
    this.setState({
      _value: this.state._pristineValue,
      _isPristine: true
    }, function () {
      this.props._validate(this);
    });
  },
  getValue: function () {
    return this.state._value;
  },
  hasValue: function () {
    return this.state._value !== '';
  },
  getErrorMessage: function () {
    return this.isValid() || this.showRequired() ? null : this.state._serverError || this.props.validationError;
  },
  isFormDisabled: function () {
    return this.props._isFormDisabled();
  },
  isValid: function () {
    return this.state._isValid;
  },
  isPristine: function () {
    return this.state._isPristine;
  },
  isRequired: function () {
    return !!this.props.required;
  },
  showRequired: function () {
    return this.isRequired() && this.state._value === '';
  },
  showError: function () {
    return !this.showRequired() && !this.state._isValid;
  },
  isValidValue: function (value) {
    return this.props._isValidValue.call(null, this, value);
  }
};



},{}],"/Users/christianalfoni/Documents/dev/formsy-react/src/main.js":[function(require,module,exports){
(function (global){
var React = global.React || require('react');
var Formsy = {};
var validationRules = require('./validationRules.js');
var utils = require('./utils.js');
var Mixin = require('./Mixin.js');
var options = {};

Formsy.Mixin = Mixin;

Formsy.defaults = function (passedOptions) {
  options = passedOptions;
};

Formsy.addValidationRule = function (name, func) {
  validationRules[name] = func;
};

Formsy.Form = React.createClass({displayName: "Form",
  getInitialState: function () {
    return {
      isValid: true,
      isSubmitting: false,
      canChange: false
    };
  },
  getDefaultProps: function () {
    return {
      headers: {},
      onSuccess: function () {},
      onError: function () {},
      onSubmit: function () {},
      onValidSubmit: function () {},
      onInvalidSubmit: function () {},
      onSubmitted: function () {},
      onValid: function () {},
      onInvalid: function () {},
      onChange: function () {}
    };
  },

  // Add a map to store the inputs of the form, a model to store
  // the values of the form and register child inputs
  componentWillMount: function () {
    this.inputs = {};
    this.model = {};
    this.registerInputs(this.props.children);
  },

  componentDidMount: function () {
    this.validateForm();
  },

  componentWillUpdate: function () {
    var inputKeys = Object.keys(this.inputs);

    // The updated children array is not available here for some reason,
    // we need to wait for next event loop
    setTimeout(function () {

      // The component might have been unmounted on an
      // update
      if (this.isMounted()) {

        this.registerInputs(this.props.children);

       if (this.props.validationErrors) {
          this.setInputValidationErrors(this.props.validationErrors);
        }

        var newInputKeys = Object.keys(this.inputs);
        if (utils.arraysDiffer(inputKeys, newInputKeys)) {
          this.validateForm();
        }

      }

    }.bind(this), 0);
  },

  // Update model, submit to url prop and send the model
  submit: function (event) {
    event.preventDefault();

    // Trigger form as not pristine.
    // If any inputs have not been touched yet this will make them dirty
    // so validation becomes visible (if based on isPristine)
    this.setFormPristine(false);

    // To support use cases where no async or request operation is needed.
    // The "onSubmit" callback is called with the model e.g. {fieldName: "myValue"},
    // if wanting to reset the entire form to original state, the second param is a callback for this.
    if (!this.props.url) {
      this.updateModel();
      var model = this.mapModel();
      this.props.onSubmit(model, this.resetModel, this.updateInputsWithError);
      this.state.isValid ? this.props.onValidSubmit(model, this.resetModel) : this.props.onInvalidSubmit(model, this.resetModel);
      return;
    }

    this.updateModel();
    this.setState({
      isSubmitting: true
    });

    this.props.onSubmit(this.mapModel(), this.resetModel, this.updateInputsWithError);

    var headers = (Object.keys(this.props.headers).length && this.props.headers) || options.headers || {};

    var method = this.props.method && utils.ajax[this.props.method.toLowerCase()] ? this.props.method.toLowerCase() : 'post';
    utils.ajax[method](this.props.url, this.mapModel(), this.props.contentType || options.contentType || 'json', headers)
      .then(function (response) {
        this.props.onSuccess(response);
        this.props.onSubmitted();
      }.bind(this))
      .catch(this.failSubmit);
  },

  mapModel: function () {
    return this.props.mapping ? this.props.mapping(this.model) : this.model;
  },

  // Goes through all registered components and
  // updates the model values
  updateModel: function () {
    Object.keys(this.inputs).forEach(function (name) {
      var component = this.inputs[name];
      this.model[name] = component.state._value;
    }.bind(this));
  },

  // Reset each key in the model to the original / initial value
  resetModel: function () {
    Object.keys(this.inputs).forEach(function (name) {
      this.inputs[name].resetValue();
    }.bind(this));
    this.validateForm();
  },

  setInputValidationErrors: function (errors) {
     Object.keys(this.inputs).forEach(function (name, index) {
      var component = this.inputs[name];
      var args = [{
        _isValid: !(name in errors),
        _serverError: errors[name]
      }];
      component.setState.apply(component, args);
    }.bind(this));   
  },

  // Go through errors from server and grab the components
  // stored in the inputs map. Change their state to invalid
  // and set the serverError message
  updateInputsWithError: function (errors) {
    Object.keys(errors).forEach(function (name, index) {
      var component = this.inputs[name];

      if (!component) {
        throw new Error('You are trying to update an input that does not exists. Verify errors object with input names. ' + JSON.stringify(errors));
      }

      var args = [{
        _isValid: false,
        _serverError: errors[name]
      }];
      component.setState.apply(component, args);
    }.bind(this));
  },

  failSubmit: function (errors) {
    this.updateInputsWithError(errors);
    this.setState({
      isSubmitting: false
    });
    this.props.onError(errors);
    this.props.onSubmitted();
  },

  // Traverse the children and children of children to find
  // all inputs by checking the name prop. Maybe do a better
  // check here
  registerInputs: function (children) {
    React.Children.forEach(children, function (child) {

      if (child && child.props && child.props.name) {
        child.props._attachToForm = this.attachToForm;
        child.props._detachFromForm = this.detachFromForm;
        child.props._validate = this.validate;
        child.props._isFormDisabled = this.isFormDisabled;
        child.props._isValidValue = this.runValidation;
      }

      if (child && child.props && child.props.children) {
        this.registerInputs(child.props.children);
      }

    }.bind(this));
  },

  isFormDisabled: function () {
    return this.props.disabled;
  },

  getCurrentValues: function () {
    return Object.keys(this.inputs).reduce(function (data, name) {
      var component = this.inputs[name];
      data[name] = component.state._value;
      return data;
    }.bind(this), {});
  },

  setFormPristine: function (isPristine) {
    var inputs = this.inputs;
    var inputKeys = Object.keys(inputs);

    // Iterate through each component and set it as pristine
    // or "dirty".
    inputKeys.forEach(function (name, index) {
      var component = inputs[name];
      component.setState({
        _isPristine: isPristine
      });
    }.bind(this));
  },

  // Use the binded values and the actual input value to
  // validate the input and set its state. Then check the
  // state of the form itself
  validate: function (component) {

    // Trigger onChange
    if (this.state.canChange) {
      this.props.onChange(this.getCurrentValues());
    }

    var isValid = true;
    if (component.validate) {
      isValid = component.validate();
    } else if (component.props.required || component._validations) {
      isValid = this.runValidation(component);
    }

    // Run through the validations, split them up and call
    // the validator IF there is a value or it is required
    component.setState({
      _isValid: isValid,
      _serverError: null
    }, this.validateForm);

  },

  // Checks validation on current value or a passed value
  runValidation: function (component, value) {

    var isValid = true;
    
    value = arguments.length === 2 ? value : component.state._value;
    if (component._validations.length && (component.props.required || value !== '')) {
      component._validations.split(/\,(?![^{\[]*[}\]])/g).forEach(function (validation) {
        var args = validation.split(':');
        var validateMethod = args.shift();
        args = args.map(function (arg) {
          try {
            return JSON.parse(arg);
          } catch (e) {
            return arg; // It is a string if it can not parse it
          }
        });
        args = [value].concat(args);
        if (!validationRules[validateMethod]) {
          throw new Error('Formsy does not have the validation rule: ' + validateMethod);
        }
        if (!validationRules[validateMethod].apply(this.getCurrentValues(), args)) {
          isValid = false;
        }
      }.bind(this));
    }
    if (typeof component.checkValidity === "function") {
      // the component defines an explicit checkValidity function
      isValid = component.checkValidity()
    }

    return isValid;
  },

  // Validate the form by going through all child input components
  // and check their state
  validateForm: function () {
    var allIsValid = true;
    var inputs = this.inputs;
    var inputKeys = Object.keys(inputs);

    // We need a callback as we are validating all inputs again. This will
    // run when the last component has set its state
    var onValidationComplete = function () {
      inputKeys.forEach(function (name) {
        if (!inputs[name].state._isValid) {
          allIsValid = false;
        }
      }.bind(this));

      this.setState({
        isValid: allIsValid
      });

      if (allIsValid) {
        this.props.onValid();
      } else {
        this.props.onInvalid();
      }

      // Tell the form that it can start to trigger change events
      this.setState({
        canChange: true
      });

    }.bind(this);

    // Run validation again in case affected by other inputs. The
    // last component validated will run the onValidationComplete callback
    inputKeys.forEach(function (name, index) {
      var component = inputs[name];
      var isValid = this.runValidation(component);
      component.setState({
        _isValid: isValid,
        _serverError: null
      }, index === inputKeys.length - 1 ? onValidationComplete : null);
    }.bind(this));

    // If there are no inputs, set state where form is ready to trigger
    // change event. New inputs might be added later
    if (!inputKeys.length && this.isMounted()) {
      this.setState({
        canChange: true
      });
    }
  },

  // Method put on each input component to register
  // itself to the form
  attachToForm: function (component) {
    this.inputs[component.props.name] = component;
    this.model[component.props.name] = component.state._value;
    this.validate(component);
  },

  // Method put on each input component to unregister
  // itself from the form
  detachFromForm: function (component) {
    delete this.inputs[component.props.name];
    delete this.model[component.props.name];
  },
  render: function () {

    return React.DOM.form({
        onSubmit: this.submit,
        className: this.props.className
      },
      this.props.children
    );

  }
});

if (!global.exports && !global.module && (!global.define || !global.define.amd)) {
  global.Formsy = Formsy;
}

module.exports = Formsy;



}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./Mixin.js":"/Users/christianalfoni/Documents/dev/formsy-react/src/Mixin.js","./utils.js":"/Users/christianalfoni/Documents/dev/formsy-react/src/utils.js","./validationRules.js":"/Users/christianalfoni/Documents/dev/formsy-react/src/validationRules.js","react":"react"}],"/Users/christianalfoni/Documents/dev/formsy-react/src/utils.js":[function(require,module,exports){
var csrfTokenSelector = typeof document != 'undefined' ? document.querySelector('meta[name="csrf-token"]') : null;

var toURLEncoded = function (element, key, list) {
  var list = list || [];
  if (typeof (element) == 'object') {
    for (var idx in element)
      toURLEncoded(element[idx], key ? key + '[' + idx + ']' : idx, list);
  } else {
    list.push(key + '=' + encodeURIComponent(element));
  }
  return list.join('&');
};

var request = function (method, url, data, contentType, headers) {

  var contentType = contentType === 'urlencoded' ? 'application/' + contentType.replace('urlencoded', 'x-www-form-urlencoded') : 'application/json';
  data = contentType === 'application/json' ? JSON.stringify(data) : toURLEncoded(data);

  return new Promise(function (resolve, reject) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open(method, url, true);
      xhr.setRequestHeader('Accept', 'application/json');
      xhr.setRequestHeader('Content-Type', contentType);

      if (!!csrfTokenSelector && !!csrfTokenSelector.content) {
        xhr.setRequestHeader('X-CSRF-Token', csrfTokenSelector.content);
      }

      // Add passed headers
      Object.keys(headers).forEach(function (header) {
        xhr.setRequestHeader(header, headers[header]);
      });

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4) {

          try {
            var response = xhr.responseText ? JSON.parse(xhr.responseText) : null;
            if (xhr.status >= 200 && xhr.status < 300) {
              resolve(response);
            } else {
              reject(response);
            }
          } catch (e) {
            reject(e);
          }

        }
      };
      xhr.send(data);
    } catch (e) {
      reject(e);
    }
  });
};

module.exports = {
  arraysDiffer: function (arrayA, arrayB) {
    var isDifferent = false;
    if (arrayA.length !== arrayB.length) {
      isDifferent = true;
    } else {
      arrayA.forEach(function (item, index) {
        if (item !== arrayB[index]) {
          isDifferent = true;
        }
      });
    }
    return isDifferent;
  },
  ajax: {
    post: request.bind(null, 'POST'),
    put: request.bind(null, 'PUT')
  }
};



},{}],"/Users/christianalfoni/Documents/dev/formsy-react/src/validationRules.js":[function(require,module,exports){
module.exports = {
  'isValue': function (value) {
    return value !== '';
  },
  'isEmail': function (value) {
    return value.match(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i);
  },
  'isTrue': function (value) {
    return value === true;
  },
  'isNumeric': function (value) {
    if (typeof value === 'number') {
      return true;
    } else {
      var matchResults = value.match(/[-+]?(\d*[.])?\d+/);
      if (!! matchResults) {
        return matchResults[0] == value;
      } else {
        return false;
      }
    }
  },
  'isAlpha': function (value) {
    return value.match(/^[a-zA-Z]+$/);
  },
  'isWords': function (value) {
    return value.match(/^[a-zA-Z\s]+$/);
  },
  'isSpecialWords': function (value) {
    return value.match(/^[a-zA-Z\s\u00C0-\u017F]+$/);
  },
  isLength: function (value, min, max) {
    if (max !== undefined) {
      return value.length >= min && value.length <= max;
    }
    return value.length >= min;
  },
  equals: function (value, eql) {
    return value == eql;
  },
  equalsField: function (value, field) {
    return value == this[field];
  }
};



},{}]},{},["./specs/Element-spec.js","./specs/Formsy-spec.js","./specs/Submit-spec.js","./specs/Validation-spec.js"])
//# sourceMappingURL=data:application/json;base64,
