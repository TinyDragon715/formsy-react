{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formsy-react.js","webpack:///webpack/bootstrap 4bb4a803b94b7cb480f9","webpack:///./src/main.js","webpack:///./src/utils.js","webpack:///./src/Mixin.js","webpack:///./src/validationRules.js","webpack:///external \"react\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_4__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","global","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","React","Formsy","validationRules","utils","Mixin","options","defaults","passedOptions","addValidationRule","name","func","Form","createClass","displayName","getInitialState","isValid","isSubmitting","canChange","getDefaultProps","onSuccess","onError","onSubmit","onValidSubmit","onInvalidSubmit","onSubmitted","onValid","onInvalid","onChange","validationErrors","preventExternalInvalidation","componentWillMount","inputs","model","componentDidMount","validateForm","componentWillUpdate","prevInputKeys","keys","componentDidUpdate","props","setInputValidationErrors","newInputKeys","arraysDiffer","reset","data","setFormPristine","resetModel","submit","event","preventDefault","updateModel","mapModel","updateInputsWithError","state","mapping","reduce","mappedModel","keyArray","split","base","currentKey","shift","bind","forEach","component","_value","setValue","resetValue","errors","index","args","_isValid","_validationError","setState","apply","isChanged","isSame","getPristineValues","getCurrentValues","value","Error","JSON","stringify","_externalError","traverseChildrenAndRegisterInputs","children","Children","map","child","cloneElement","_attachToForm","attachToForm","_detachFromForm","detachFromForm","_validate","validate","_isFormDisabled","isFormDisabled","_isValidValue","runValidation","disabled","isPristine","inputKeys","_formSubmitted","_isPristine","validation","_isRequired","isRequired","error","currentValues","validationError","validationResults","runRules","_validations","requiredResults","_requiredValidations","failed","success","validations","results","validationMethod","push","allIsValid","onValidationComplete","every","isMounted","render","createElement","a","b","isDifferent","item","objectsDiffer","Array","isArray","convertValidationsToObject","validateMethod","arg","parse","e","_pristineValue","configure","setValidations","required","setTimeout","componentWillReceiveProps","nextProps","prevProps","componentWillUnmount","isDefaultRequiredValue","getValue","hasValue","getErrorMessage","showRequired","isFormSubmitted","showError","isValidValue","_isExisty","undefined","isEmpty","values","isExisty","matchRegexp","regexp","test","isUndefined","isEmptyString","isEmail","isUrl","isTrue","isFalse","isNumeric","isAlpha","isWords","isSpecialWords","isLength","equals","eql","equalsField","field","maxLength","minLength"],"mappings":"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","file":"formsy-react.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Formsy\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"Formsy\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Formsy\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"Formsy\"] = factory(root[\"react\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_4__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar React = global.React || __webpack_require__(4);\n\tvar Formsy = {};\n\tvar validationRules = __webpack_require__(3);\n\tvar utils = __webpack_require__(1);\n\tvar Mixin = __webpack_require__(2);\n\tvar options = {};\n\t\n\tFormsy.Mixin = Mixin;\n\t\n\tFormsy.defaults = function (passedOptions) {\n\t  options = passedOptions;\n\t};\n\t\n\tFormsy.addValidationRule = function (name, func) {\n\t  validationRules[name] = func;\n\t};\n\t\n\tFormsy.Form = React.createClass({\n\t  displayName: 'Form',\n\t\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      isValid: true,\n\t      isSubmitting: false,\n\t      canChange: false\n\t    };\n\t  },\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      onSuccess: function onSuccess() {},\n\t      onError: function onError() {},\n\t      onSubmit: function onSubmit() {},\n\t      onValidSubmit: function onValidSubmit() {},\n\t      onInvalidSubmit: function onInvalidSubmit() {},\n\t      onSubmitted: function onSubmitted() {},\n\t      onValid: function onValid() {},\n\t      onInvalid: function onInvalid() {},\n\t      onChange: function onChange() {},\n\t      validationErrors: null,\n\t      preventExternalInvalidation: false\n\t    };\n\t  },\n\t\n\t  // Add a map to store the inputs of the form, a model to store\n\t  // the values of the form and register child inputs\n\t  componentWillMount: function componentWillMount() {\n\t    this.inputs = {};\n\t    this.model = {};\n\t  },\n\t\n\t  componentDidMount: function componentDidMount() {\n\t    this.validateForm();\n\t  },\n\t\n\t  componentWillUpdate: function componentWillUpdate() {\n\t\n\t    // Keep a reference to input keys before form updates,\n\t    // to check if inputs has changed after render\n\t    this.prevInputKeys = Object.keys(this.inputs);\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate() {\n\t\n\t    if (this.props.validationErrors) {\n\t      this.setInputValidationErrors(this.props.validationErrors);\n\t    }\n\t\n\t    var newInputKeys = Object.keys(this.inputs);\n\t    if (utils.arraysDiffer(this.prevInputKeys, newInputKeys)) {\n\t      this.validateForm();\n\t    }\n\t  },\n\t\n\t  // Allow resetting to specified data\n\t  reset: function reset(data) {\n\t    this.setFormPristine(true);\n\t    this.resetModel(data);\n\t  },\n\t\n\t  // Update model, submit to url prop and send the model\n\t  submit: function submit(event) {\n\t\n\t    event && event.preventDefault();\n\t\n\t    // Trigger form as not pristine.\n\t    // If any inputs have not been touched yet this will make them dirty\n\t    // so validation becomes visible (if based on isPristine)\n\t    this.setFormPristine(false);\n\t    this.updateModel();\n\t    var model = this.mapModel();\n\t    this.props.onSubmit(model, this.resetModel, this.updateInputsWithError);\n\t    this.state.isValid ? this.props.onValidSubmit(model, this.resetModel, this.updateInputsWithError) : this.props.onInvalidSubmit(model, this.resetModel, this.updateInputsWithError);\n\t  },\n\t\n\t  mapModel: function mapModel() {\n\t    if (this.props.mapping) {\n\t      return this.props.mapping(this.model);\n\t    } else {\n\t      return Object.keys(this.model).reduce((function (mappedModel, key) {\n\t\n\t        var keyArray = key.split('.');\n\t        var base = mappedModel;\n\t        while (keyArray.length) {\n\t          var currentKey = keyArray.shift();\n\t          base = base[currentKey] = keyArray.length ? base[currentKey] || {} : this.model[key];\n\t        }\n\t\n\t        return mappedModel;\n\t      }).bind(this), {});\n\t    }\n\t  },\n\t\n\t  // Goes through all registered components and\n\t  // updates the model values\n\t  updateModel: function updateModel() {\n\t    Object.keys(this.inputs).forEach((function (name) {\n\t      var component = this.inputs[name];\n\t      this.model[name] = component.state._value;\n\t    }).bind(this));\n\t  },\n\t\n\t  // Reset each key in the model to the original / initial / specified value\n\t  resetModel: function resetModel(data) {\n\t    Object.keys(this.inputs).forEach((function (name) {\n\t      if (data && data[name]) {\n\t        this.inputs[name].setValue(data[name]);\n\t      } else {\n\t        this.inputs[name].resetValue();\n\t      }\n\t    }).bind(this));\n\t    this.validateForm();\n\t  },\n\t\n\t  setInputValidationErrors: function setInputValidationErrors(errors) {\n\t    Object.keys(this.inputs).forEach((function (name, index) {\n\t      var component = this.inputs[name];\n\t      var args = [{\n\t        _isValid: !(name in errors),\n\t        _validationError: errors[name]\n\t      }];\n\t      component.setState.apply(component, args);\n\t    }).bind(this));\n\t  },\n\t\n\t  // Checks if the values have changed from their initial value\n\t  isChanged: function isChanged() {\n\t    return !utils.isSame(this.getPristineValues(), this.getCurrentValues());\n\t  },\n\t\n\t  getPristineValues: function getPristineValues() {\n\t    var inputs = this.inputs;\n\t    return Object.keys(inputs).reduce(function (data, name) {\n\t      var component = inputs[name];\n\t      data[name] = component.props.value;\n\t      return data;\n\t    }, {});\n\t  },\n\t\n\t  // Go through errors from server and grab the components\n\t  // stored in the inputs map. Change their state to invalid\n\t  // and set the serverError message\n\t  updateInputsWithError: function updateInputsWithError(errors) {\n\t    Object.keys(errors).forEach((function (name, index) {\n\t      var component = this.inputs[name];\n\t\n\t      if (!component) {\n\t        throw new Error('You are trying to update an input that does not exist. Verify errors object with input names. ' + JSON.stringify(errors));\n\t      }\n\t      var args = [{\n\t        _isValid: this.props.preventExternalInvalidation || false,\n\t        _externalError: errors[name]\n\t      }];\n\t      component.setState.apply(component, args);\n\t    }).bind(this));\n\t  },\n\t\n\t  // Traverse the children and children of children to find\n\t  // all inputs by checking the name prop. Maybe do a better\n\t  // check here\n\t  traverseChildrenAndRegisterInputs: function traverseChildrenAndRegisterInputs(children) {\n\t\n\t    if (typeof children !== 'object' || children === null) {\n\t      return children;\n\t    }\n\t    return React.Children.map(children, function (child) {\n\t\n\t      if (typeof child !== 'object' || child === null) {\n\t        return child;\n\t      }\n\t\n\t      if (child.props && child.props.name) {\n\t\n\t        return React.cloneElement(child, {\n\t          _attachToForm: this.attachToForm,\n\t          _detachFromForm: this.detachFromForm,\n\t          _validate: this.validate,\n\t          _isFormDisabled: this.isFormDisabled,\n\t          _isValidValue: (function (component, value) {\n\t            return this.runValidation(component, value).isValid;\n\t          }).bind(this)\n\t        }, child.props && child.props.children);\n\t      } else {\n\t        return React.cloneElement(child, {}, this.traverseChildrenAndRegisterInputs(child.props && child.props.children));\n\t      }\n\t    }, this);\n\t  },\n\t\n\t  isFormDisabled: function isFormDisabled() {\n\t    return this.props.disabled;\n\t  },\n\t\n\t  getCurrentValues: function getCurrentValues() {\n\t    return Object.keys(this.inputs).reduce((function (data, name) {\n\t      var component = this.inputs[name];\n\t      data[name] = component.state._value;\n\t      return data;\n\t    }).bind(this), {});\n\t  },\n\t\n\t  setFormPristine: function setFormPristine(isPristine) {\n\t    var inputs = this.inputs;\n\t    var inputKeys = Object.keys(inputs);\n\t\n\t    this.setState({\n\t      _formSubmitted: !isPristine\n\t    });\n\t\n\t    // Iterate through each component and set it as pristine\n\t    // or \"dirty\".\n\t    inputKeys.forEach((function (name, index) {\n\t      var component = inputs[name];\n\t      component.setState({\n\t        _formSubmitted: !isPristine,\n\t        _isPristine: isPristine\n\t      });\n\t    }).bind(this));\n\t  },\n\t\n\t  // Use the binded values and the actual input value to\n\t  // validate the input and set its state. Then check the\n\t  // state of the form itself\n\t  validate: function validate(component) {\n\t\n\t    // Trigger onChange\n\t    if (this.state.canChange) {\n\t      this.props.onChange(this.getCurrentValues(), this.isChanged());\n\t    }\n\t\n\t    var validation = this.runValidation(component);\n\t    // Run through the validations, split them up and call\n\t    // the validator IF there is a value or it is required\n\t    component.setState({\n\t      _isValid: validation.isValid,\n\t      _isRequired: validation.isRequired,\n\t      _validationError: validation.error,\n\t      _externalError: null\n\t    }, this.validateForm);\n\t  },\n\t\n\t  // Checks validation on current value or a passed value\n\t  runValidation: function runValidation(component, value) {\n\t\n\t    var currentValues = this.getCurrentValues();\n\t    var validationErrors = component.props.validationErrors;\n\t    var validationError = component.props.validationError;\n\t    value = arguments.length === 2 ? value : component.state._value;\n\t\n\t    var validationResults = this.runRules(value, currentValues, component._validations);\n\t    var requiredResults = this.runRules(value, currentValues, component._requiredValidations);\n\t\n\t    // the component defines an explicit validate function\n\t    if (typeof component.validate === \"function\") {\n\t      validationResults.failed = component.validate() ? [] : ['failed'];\n\t    }\n\t\n\t    var isRequired = Object.keys(component._requiredValidations).length ? !!requiredResults.success.length : false;\n\t    var isValid = !validationResults.failed.length && !(this.props.validationErrors && this.props.validationErrors[component.props.name]);\n\t\n\t    return {\n\t      isRequired: isRequired,\n\t      isValid: isRequired ? false : isValid,\n\t      error: (function () {\n\t\n\t        if (isValid && !isRequired) {\n\t          return '';\n\t        }\n\t\n\t        if (validationResults.errors.length) {\n\t          return validationResults.errors[0];\n\t        }\n\t\n\t        if (this.props.validationErrors && this.props.validationErrors[component.props.name]) {\n\t          return this.props.validationErrors[component.props.name];\n\t        }\n\t\n\t        if (isRequired) {\n\t          return validationErrors[requiredResults.success[0]] || null;\n\t        }\n\t\n\t        if (!isValid) {\n\t          return validationErrors[validationResults.failed[0]] || validationError;\n\t        }\n\t      }).call(this)\n\t    };\n\t  },\n\t\n\t  runRules: function runRules(value, currentValues, validations) {\n\t\n\t    var results = {\n\t      errors: [],\n\t      failed: [],\n\t      success: []\n\t    };\n\t    if (Object.keys(validations).length) {\n\t      Object.keys(validations).forEach(function (validationMethod) {\n\t\n\t        if (validationRules[validationMethod] && typeof validations[validationMethod] === 'function') {\n\t          throw new Error('Formsy does not allow you to override default validations: ' + validationMethod);\n\t        }\n\t\n\t        if (!validationRules[validationMethod] && typeof validations[validationMethod] !== 'function') {\n\t          throw new Error('Formsy does not have the validation rule: ' + validationMethod);\n\t        }\n\t\n\t        if (typeof validations[validationMethod] === 'function') {\n\t          var validation = validations[validationMethod](currentValues, value);\n\t          if (typeof validation === 'string') {\n\t            results.errors.push(validation);\n\t            results.failed.push(validationMethod);\n\t          } else if (!validation) {\n\t            results.failed.push(validationMethod);\n\t          }\n\t          return;\n\t        } else if (typeof validations[validationMethod] !== 'function') {\n\t          var validation = validationRules[validationMethod](currentValues, value, validations[validationMethod]);\n\t          if (typeof validation === 'string') {\n\t            results.errors.push(validation);\n\t            results.failed.push(validationMethod);\n\t          } else if (!validation) {\n\t            results.failed.push(validationMethod);\n\t          } else {\n\t            results.success.push(validationMethod);\n\t          }\n\t          return;\n\t        }\n\t\n\t        return results.success.push(validationMethod);\n\t      });\n\t    }\n\t\n\t    return results;\n\t  },\n\t\n\t  // Validate the form by going through all child input components\n\t  // and check their state\n\t  validateForm: function validateForm() {\n\t    var allIsValid;\n\t    var inputs = this.inputs;\n\t    var inputKeys = Object.keys(inputs);\n\t\n\t    // We need a callback as we are validating all inputs again. This will\n\t    // run when the last component has set its state\n\t    var onValidationComplete = (function () {\n\t      allIsValid = inputKeys.every((function (name) {\n\t        return inputs[name].state._isValid;\n\t      }).bind(this));\n\t\n\t      this.setState({\n\t        isValid: allIsValid\n\t      });\n\t\n\t      if (allIsValid) {\n\t        this.props.onValid();\n\t      } else {\n\t        this.props.onInvalid();\n\t      }\n\t\n\t      // Tell the form that it can start to trigger change events\n\t      this.setState({\n\t        canChange: true\n\t      });\n\t    }).bind(this);\n\t\n\t    // Run validation again in case affected by other inputs. The\n\t    // last component validated will run the onValidationComplete callback\n\t    inputKeys.forEach((function (name, index) {\n\t      var component = inputs[name];\n\t      var validation = this.runValidation(component);\n\t      if (validation.isValid && component.state._externalError) {\n\t        validation.isValid = false;\n\t      }\n\t      component.setState({\n\t        _isValid: validation.isValid,\n\t        _isRequired: validation.isRequired,\n\t        _validationError: validation.error,\n\t        _externalError: !validation.isValid && component.state._externalError ? component.state._externalError : null\n\t      }, index === inputKeys.length - 1 ? onValidationComplete : null);\n\t    }).bind(this));\n\t\n\t    // If there are no inputs, set state where form is ready to trigger\n\t    // change event. New inputs might be added later\n\t    if (!inputKeys.length && this.isMounted()) {\n\t      this.setState({\n\t        canChange: true\n\t      });\n\t    }\n\t  },\n\t\n\t  // Method put on each input component to register\n\t  // itself to the form\n\t  attachToForm: function attachToForm(component) {\n\t    this.inputs[component.props.name] = component;\n\t    this.model[component.props.name] = component.state._value;\n\t    this.validate(component);\n\t  },\n\t\n\t  // Method put on each input component to unregister\n\t  // itself from the form\n\t  detachFromForm: function detachFromForm(component) {\n\t    delete this.inputs[component.props.name];\n\t    delete this.model[component.props.name];\n\t    this.validateForm();\n\t  },\n\t  render: function render() {\n\t\n\t    return React.createElement(\n\t      'form',\n\t      _extends({}, this.props, { onSubmit: this.submit }),\n\t      this.traverseChildrenAndRegisterInputs(this.props.children)\n\t    );\n\t  }\n\t});\n\t\n\tif (!global.exports && !global.module && (!global.define || !global.define.amd)) {\n\t  global.Formsy = Formsy;\n\t}\n\t\n\tmodule.exports = Formsy;\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tmodule.exports = {\n\t  arraysDiffer: function arraysDiffer(a, b) {\n\t    var isDifferent = false;\n\t    if (a.length !== b.length) {\n\t      isDifferent = true;\n\t    } else {\n\t      a.forEach(function (item, index) {\n\t        if (!this.isSame(item, b[index])) {\n\t          isDifferent = true;\n\t        }\n\t      }, this);\n\t    }\n\t    return isDifferent;\n\t  },\n\t\n\t  objectsDiffer: function objectsDiffer(a, b) {\n\t    var isDifferent = false;\n\t    if (Object.keys(a).length !== Object.keys(b).length) {\n\t      isDifferent = true;\n\t    } else {\n\t      Object.keys(a).forEach(function (key) {\n\t        if (!this.isSame(a[key], b[key])) {\n\t          isDifferent = true;\n\t        }\n\t      }, this);\n\t    }\n\t    return isDifferent;\n\t  },\n\t\n\t  isSame: function isSame(a, b) {\n\t    if (typeof a !== typeof b) {\n\t      return false;\n\t    } else if (Array.isArray(a)) {\n\t      return !this.arraysDiffer(a, b);\n\t    } else if (typeof a === 'object' && a !== null && b !== null) {\n\t      return !this.objectsDiffer(a, b);\n\t    }\n\t\n\t    return a === b;\n\t  }\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar utils = __webpack_require__(1);\n\t\n\tvar convertValidationsToObject = function convertValidationsToObject(validations) {\n\t\n\t  if (typeof validations === 'string') {\n\t\n\t    return validations.split(/\\,(?![^{\\[]*[}\\]])/g).reduce(function (validations, validation) {\n\t      var args = validation.split(':');\n\t      var validateMethod = args.shift();\n\t\n\t      args = args.map(function (arg) {\n\t        try {\n\t          return JSON.parse(arg);\n\t        } catch (e) {\n\t          return arg; // It is a string if it can not parse it\n\t        }\n\t      });\n\t\n\t      if (args.length > 1) {\n\t        throw new Error('Formsy does not support multiple args on string validations. Use object format of validations instead.');\n\t      }\n\t\n\t      validations[validateMethod] = args.length ? args[0] : true;\n\t      return validations;\n\t    }, {});\n\t  }\n\t\n\t  return validations || {};\n\t};\n\t\n\tmodule.exports = {\n\t  getInitialState: function getInitialState() {\n\t    return {\n\t      _value: this.props.value,\n\t      _isRequired: false,\n\t      _isValid: true,\n\t      _isPristine: true,\n\t      _pristineValue: this.props.value,\n\t      _validationError: '',\n\t      _externalError: null,\n\t      _formSubmitted: false\n\t    };\n\t  },\n\t  getDefaultProps: function getDefaultProps() {\n\t    return {\n\t      validationError: '',\n\t      validationErrors: {}\n\t    };\n\t  },\n\t\n\t  componentWillMount: function componentWillMount() {\n\t    var configure = (function () {\n\t      this.setValidations(this.props.validations, this.props.required);\n\t      this.props._attachToForm(this);\n\t    }).bind(this);\n\t\n\t    if (!this.props.name) {\n\t      throw new Error('Form Input requires a name property when used');\n\t    }\n\t\n\t    if (!this.props._attachToForm) {\n\t      return setTimeout((function () {\n\t        if (!this.isMounted()) return;\n\t        if (!this.props._attachToForm) {\n\t          throw new Error('Form Mixin requires component to be nested in a Form');\n\t        }\n\t        configure();\n\t      }).bind(this), 0);\n\t    }\n\t    configure();\n\t  },\n\t\n\t  // We have to make the validate method is kept when new props are added\n\t  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n\t    this.setValidations(nextProps.validations, nextProps.required);\n\t  },\n\t\n\t  componentDidUpdate: function componentDidUpdate(prevProps) {\n\t\n\t    // If the value passed has changed, set it. If value is not passed it will\n\t    // internally update, and this will never run\n\t    if (!utils.isSame(this.props.value, prevProps.value)) {\n\t      this.setValue(this.props.value);\n\t    }\n\t  },\n\t\n\t  // Detach it when component unmounts\n\t  componentWillUnmount: function componentWillUnmount() {\n\t    this.props._detachFromForm(this);\n\t  },\n\t\n\t  setValidations: function setValidations(validations, required) {\n\t\n\t    // Add validations to the store itself as the props object can not be modified\n\t    this._validations = convertValidationsToObject(validations) || {};\n\t    this._requiredValidations = required === true ? { isDefaultRequiredValue: true } : convertValidationsToObject(required);\n\t  },\n\t\n\t  // We validate after the value has been set\n\t  setValue: function setValue(value) {\n\t    this.setState({\n\t      _value: value,\n\t      _isPristine: false\n\t    }, (function () {\n\t      this.props._validate(this);\n\t    }).bind(this));\n\t  },\n\t  resetValue: function resetValue() {\n\t    this.setState({\n\t      _value: this.state._pristineValue,\n\t      _isPristine: true\n\t    }, function () {\n\t      this.props._validate(this);\n\t    });\n\t  },\n\t  getValue: function getValue() {\n\t    return this.state._value;\n\t  },\n\t  hasValue: function hasValue() {\n\t    return this.state._value !== '';\n\t  },\n\t  getErrorMessage: function getErrorMessage() {\n\t    return !this.isValid() || this.showRequired() ? this.state._externalError || this.state._validationError : null;\n\t  },\n\t  isFormDisabled: function isFormDisabled() {\n\t    return this.props._isFormDisabled();\n\t  },\n\t  isValid: function isValid() {\n\t    return this.state._isValid;\n\t  },\n\t  isPristine: function isPristine() {\n\t    return this.state._isPristine;\n\t  },\n\t  isFormSubmitted: function isFormSubmitted() {\n\t    return this.state._formSubmitted;\n\t  },\n\t  isRequired: function isRequired() {\n\t    return !!this.props.required;\n\t  },\n\t  showRequired: function showRequired() {\n\t    return this.state._isRequired;\n\t  },\n\t  showError: function showError() {\n\t    return !this.showRequired() && !this.isValid();\n\t  },\n\t  isValidValue: function isValidValue(value) {\n\t    return this.props._isValidValue.call(null, this, value);\n\t  }\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar _isExisty = function _isExisty(value) {\n\t  return value !== null && value !== undefined;\n\t};\n\t\n\tvar isEmpty = function isEmpty(value) {\n\t  return value === '';\n\t};\n\t\n\tvar validations = {\n\t  isDefaultRequiredValue: function isDefaultRequiredValue(values, value) {\n\t    return value === undefined || value === '';\n\t  },\n\t  isExisty: function isExisty(values, value) {\n\t    return _isExisty(value);\n\t  },\n\t  matchRegexp: function matchRegexp(values, value, regexp) {\n\t    return !_isExisty(value) || isEmpty(value) || regexp.test(value);\n\t  },\n\t  isUndefined: function isUndefined(values, value) {\n\t    return value === undefined;\n\t  },\n\t  isEmptyString: function isEmptyString(values, value) {\n\t    return isEmpty(value);\n\t  },\n\t  isEmail: function isEmail(values, value) {\n\t    return validations.matchRegexp(values, value, /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i);\n\t  },\n\t  isUrl: function isUrl(values, value) {\n\t    return validations.matchRegexp(values, value, /^(https?|s?ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i);\n\t  },\n\t  isTrue: function isTrue(values, value) {\n\t    return value === true;\n\t  },\n\t  isFalse: function isFalse(values, value) {\n\t    return value === false;\n\t  },\n\t  isNumeric: function isNumeric(values, value) {\n\t    if (typeof value === 'number') {\n\t      return true;\n\t    }\n\t    return validations.matchRegexp(values, value, /^[-+]?(\\d*[.])?\\d+$/);\n\t  },\n\t  isAlpha: function isAlpha(values, value) {\n\t    return validations.matchRegexp(values, value, /^[a-zA-Z]+$/);\n\t  },\n\t  isWords: function isWords(values, value) {\n\t    return validations.matchRegexp(values, value, /^[a-zA-Z\\s]+$/);\n\t  },\n\t  isSpecialWords: function isSpecialWords(values, value) {\n\t    return validations.matchRegexp(values, value, /^[a-zA-Z\\s\\u00C0-\\u017F]+$/);\n\t  },\n\t  isLength: function isLength(values, value, length) {\n\t    return !_isExisty(value) || isEmpty(value) || value.length === length;\n\t  },\n\t  equals: function equals(values, value, eql) {\n\t    return !_isExisty(value) || isEmpty(value) || value == eql;\n\t  },\n\t  equalsField: function equalsField(values, value, field) {\n\t    return value == values[field];\n\t  },\n\t  maxLength: function maxLength(values, value, length) {\n\t    return !_isExisty(value) || value.length <= length;\n\t  },\n\t  minLength: function minLength(values, value, length) {\n\t    return !_isExisty(value) || isEmpty(value) || value.length >= length;\n\t  }\n\t};\n\t\n\tmodule.exports = validations;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** formsy-react.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 4bb4a803b94b7cb480f9\n **/","var React = global.React || require('react');\nvar Formsy = {};\nvar validationRules = require('./validationRules.js');\nvar utils = require('./utils.js');\nvar Mixin = require('./Mixin.js');\nvar options = {};\n\nFormsy.Mixin = Mixin;\n\nFormsy.defaults = function (passedOptions) {\n  options = passedOptions;\n};\n\nFormsy.addValidationRule = function (name, func) {\n  validationRules[name] = func;\n};\n\nFormsy.Form = React.createClass({\n  getInitialState: function () {\n    return {\n      isValid: true,\n      isSubmitting: false,\n      canChange: false\n    };\n  },\n  getDefaultProps: function () {\n    return {\n      onSuccess: function () {},\n      onError: function () {},\n      onSubmit: function () {},\n      onValidSubmit: function () {},\n      onInvalidSubmit: function () {},\n      onSubmitted: function () {},\n      onValid: function () {},\n      onInvalid: function () {},\n      onChange: function () {},\n      validationErrors: null,\n      preventExternalInvalidation: false\n    };\n  },\n\n  // Add a map to store the inputs of the form, a model to store\n  // the values of the form and register child inputs\n  componentWillMount: function () {\n    this.inputs = {};\n    this.model = {};\n  },\n\n  componentDidMount: function () {\n    this.validateForm();\n  },\n\n  componentWillUpdate: function () {\n\n    // Keep a reference to input keys before form updates,\n    // to check if inputs has changed after render\n    this.prevInputKeys = Object.keys(this.inputs);\n\n  },\n\n  componentDidUpdate: function () {\n\n    if (this.props.validationErrors) {\n      this.setInputValidationErrors(this.props.validationErrors);\n    }\n\n    var newInputKeys = Object.keys(this.inputs);\n    if (utils.arraysDiffer(this.prevInputKeys, newInputKeys)) {\n      this.validateForm();\n    }\n\n  },\n\n  // Allow resetting to specified data\n  reset: function (data) {\n    this.setFormPristine(true);\n    this.resetModel(data);\n  },\n\n  // Update model, submit to url prop and send the model\n  submit: function (event) {\n\n    event && event.preventDefault();\n\n    // Trigger form as not pristine.\n    // If any inputs have not been touched yet this will make them dirty\n    // so validation becomes visible (if based on isPristine)\n    this.setFormPristine(false);\n    this.updateModel();\n    var model = this.mapModel();\n    this.props.onSubmit(model, this.resetModel, this.updateInputsWithError);\n    this.state.isValid ? this.props.onValidSubmit(model, this.resetModel, this.updateInputsWithError) : this.props.onInvalidSubmit(model, this.resetModel, this.updateInputsWithError);\n\n  },\n\n  mapModel: function () {\n    if (this.props.mapping) {\n      return this.props.mapping(this.model)\n    } else {\n      return Object.keys(this.model).reduce(function (mappedModel, key) {\n\n        var keyArray = key.split('.');\n        var base = mappedModel;\n        while (keyArray.length) {\n          var currentKey = keyArray.shift();\n          base = (base[currentKey] = keyArray.length ? base[currentKey] || {} : this.model[key]);\n        }\n\n        return mappedModel;\n\n      }.bind(this), {});\n    }\n  },\n\n  // Goes through all registered components and\n  // updates the model values\n  updateModel: function () {\n    Object.keys(this.inputs).forEach(function (name) {\n      var component = this.inputs[name];\n      this.model[name] = component.state._value;\n    }.bind(this));\n  },\n\n  // Reset each key in the model to the original / initial / specified value\n  resetModel: function (data) {\n    Object.keys(this.inputs).forEach(function (name) {\n      if (data && data[name]) {\n        this.inputs[name].setValue(data[name]);\n      } else {\n        this.inputs[name].resetValue();\n      }\n    }.bind(this));\n    this.validateForm();\n  },\n\n  setInputValidationErrors: function (errors) {\n    Object.keys(this.inputs).forEach(function (name, index) {\n      var component = this.inputs[name];\n      var args = [{\n        _isValid: !(name in errors),\n        _validationError: errors[name]\n      }];\n      component.setState.apply(component, args);\n    }.bind(this));\n  },\n\n  // Checks if the values have changed from their initial value\n  isChanged: function() {\n    return !utils.isSame(this.getPristineValues(), this.getCurrentValues());\n  },\n\n   getPristineValues: function() {\n    var inputs = this.inputs;\n    return Object.keys(inputs).reduce(function (data, name) {\n      var component = inputs[name];\n      data[name] = component.props.value;\n      return data;\n    }, {});\n  },\n\n  // Go through errors from server and grab the components\n  // stored in the inputs map. Change their state to invalid\n  // and set the serverError message\n  updateInputsWithError: function (errors) {\n    Object.keys(errors).forEach(function (name, index) {\n      var component = this.inputs[name];\n\n      if (!component) {\n        throw new Error('You are trying to update an input that does not exist. Verify errors object with input names. ' + JSON.stringify(errors));\n      }\n      var args = [{\n        _isValid: this.props.preventExternalInvalidation || false,\n        _externalError: errors[name]\n      }];\n      component.setState.apply(component, args);\n    }.bind(this));\n  },\n\n  // Traverse the children and children of children to find\n  // all inputs by checking the name prop. Maybe do a better\n  // check here\n  traverseChildrenAndRegisterInputs: function (children) {\n\n    if (typeof children !== 'object' || children === null) {\n      return children;\n    }\n    return React.Children.map(children, function (child) {\n\n      if (typeof child !== 'object' || child === null) {\n        return child;\n      }\n\n      if (child.props && child.props.name) {\n\n        return React.cloneElement(child, {\n          _attachToForm: this.attachToForm,\n          _detachFromForm: this.detachFromForm,\n          _validate: this.validate,\n          _isFormDisabled: this.isFormDisabled,\n          _isValidValue: function (component, value) {\n            return this.runValidation(component, value).isValid;\n          }.bind(this)\n        }, child.props && child.props.children);\n      } else {\n        return React.cloneElement(child, {}, this.traverseChildrenAndRegisterInputs(child.props && child.props.children));\n      }\n\n    }, this);\n\n  },\n\n  isFormDisabled: function () {\n    return this.props.disabled;\n  },\n\n  getCurrentValues: function () {\n    return Object.keys(this.inputs).reduce(function (data, name) {\n      var component = this.inputs[name];\n      data[name] = component.state._value;\n      return data;\n    }.bind(this), {});\n  },\n\n  setFormPristine: function (isPristine) {\n    var inputs = this.inputs;\n    var inputKeys = Object.keys(inputs);\n\n    this.setState({\n        _formSubmitted: !isPristine\n    })\n\n    // Iterate through each component and set it as pristine\n    // or \"dirty\".\n    inputKeys.forEach(function (name, index) {\n      var component = inputs[name];\n      component.setState({\n        _formSubmitted: !isPristine,\n        _isPristine: isPristine\n      });\n    }.bind(this));\n  },\n\n  // Use the binded values and the actual input value to\n  // validate the input and set its state. Then check the\n  // state of the form itself\n  validate: function (component) {\n\n    // Trigger onChange\n    if (this.state.canChange) {\n      this.props.onChange(this.getCurrentValues(), this.isChanged());\n    }\n\n    var validation = this.runValidation(component);\n    // Run through the validations, split them up and call\n    // the validator IF there is a value or it is required\n    component.setState({\n      _isValid: validation.isValid,\n      _isRequired: validation.isRequired,\n      _validationError: validation.error,\n      _externalError: null\n    }, this.validateForm);\n\n  },\n\n  // Checks validation on current value or a passed value\n  runValidation: function (component, value) {\n\n    var currentValues = this.getCurrentValues();\n    var validationErrors = component.props.validationErrors;\n    var validationError = component.props.validationError;\n    value = arguments.length === 2 ? value : component.state._value;\n\n    var validationResults = this.runRules(value, currentValues, component._validations);\n    var requiredResults = this.runRules(value, currentValues, component._requiredValidations);\n\n    // the component defines an explicit validate function\n    if (typeof component.validate === \"function\") {\n      validationResults.failed = component.validate() ? [] : ['failed'];\n    }\n\n    var isRequired = Object.keys(component._requiredValidations).length ? !!requiredResults.success.length : false;\n    var isValid = !validationResults.failed.length && !(this.props.validationErrors && this.props.validationErrors[component.props.name]);\n\n    return {\n      isRequired: isRequired,\n      isValid: isRequired ? false : isValid,\n      error: (function () {\n\n        if (isValid && !isRequired) {\n          return '';\n        }\n\n        if (validationResults.errors.length) {\n          return validationResults.errors[0];\n        }\n\n        if (this.props.validationErrors && this.props.validationErrors[component.props.name]) {\n          return this.props.validationErrors[component.props.name];\n        }\n\n        if (isRequired) {\n          return validationErrors[requiredResults.success[0]] || null;\n        }\n\n        if (!isValid) {\n          return validationErrors[validationResults.failed[0]] || validationError;\n        }\n\n      }.call(this))\n    };\n\n  },\n\n  runRules: function (value, currentValues, validations) {\n\n    var results = {\n      errors: [],\n      failed: [],\n      success: []\n    };\n    if (Object.keys(validations).length) {\n      Object.keys(validations).forEach(function (validationMethod) {\n\n        if (validationRules[validationMethod] && typeof validations[validationMethod] === 'function') {\n          throw new Error('Formsy does not allow you to override default validations: ' + validationMethod);\n        }\n\n        if (!validationRules[validationMethod] && typeof validations[validationMethod] !== 'function') {\n          throw new Error('Formsy does not have the validation rule: ' + validationMethod);\n        }\n\n        if (typeof validations[validationMethod] === 'function') {\n          var validation = validations[validationMethod](currentValues, value);\n          if (typeof validation === 'string') {\n            results.errors.push(validation);\n            results.failed.push(validationMethod);\n          } else if (!validation) {\n            results.failed.push(validationMethod);\n          }\n          return;\n\n        } else if (typeof validations[validationMethod] !== 'function') {\n          var validation = validationRules[validationMethod](currentValues, value, validations[validationMethod]);\n          if (typeof validation === 'string') {\n            results.errors.push(validation);\n            results.failed.push(validationMethod);\n          } else if (!validation) {\n            results.failed.push(validationMethod);\n          } else {\n            results.success.push(validationMethod);\n          }\n          return;\n\n        }\n\n        return results.success.push(validationMethod);\n\n      });\n    }\n\n    return results;\n\n  },\n\n  // Validate the form by going through all child input components\n  // and check their state\n  validateForm: function () {\n    var allIsValid;\n    var inputs = this.inputs;\n    var inputKeys = Object.keys(inputs);\n\n    // We need a callback as we are validating all inputs again. This will\n    // run when the last component has set its state\n    var onValidationComplete = function () {\n      allIsValid = inputKeys.every(function (name) {\n        return inputs[name].state._isValid;\n      }.bind(this));\n\n      this.setState({\n        isValid: allIsValid\n      });\n\n      if (allIsValid) {\n        this.props.onValid();\n      } else {\n        this.props.onInvalid();\n      }\n\n      // Tell the form that it can start to trigger change events\n      this.setState({\n        canChange: true\n      });\n\n    }.bind(this);\n\n    // Run validation again in case affected by other inputs. The\n    // last component validated will run the onValidationComplete callback\n    inputKeys.forEach(function (name, index) {\n      var component = inputs[name];\n      var validation = this.runValidation(component);\n      if (validation.isValid && component.state._externalError) {\n        validation.isValid = false;\n      }\n      component.setState({\n        _isValid: validation.isValid,\n        _isRequired: validation.isRequired,\n        _validationError: validation.error,\n        _externalError: !validation.isValid && component.state._externalError ? component.state._externalError : null\n      }, index === inputKeys.length - 1 ? onValidationComplete : null);\n    }.bind(this));\n\n    // If there are no inputs, set state where form is ready to trigger\n    // change event. New inputs might be added later\n    if (!inputKeys.length && this.isMounted()) {\n      this.setState({\n        canChange: true\n      });\n    }\n  },\n\n  // Method put on each input component to register\n  // itself to the form\n  attachToForm: function (component) {\n    this.inputs[component.props.name] = component;\n    this.model[component.props.name] = component.state._value;\n    this.validate(component);\n  },\n\n  // Method put on each input component to unregister\n  // itself from the form\n  detachFromForm: function (component) {\n    delete this.inputs[component.props.name];\n    delete this.model[component.props.name];\n    this.validateForm();\n  },\n  render: function () {\n\n    return (\n      <form {...this.props} onSubmit={this.submit}>\n        {this.traverseChildrenAndRegisterInputs(this.props.children)}\n      </form>\n    );\n\n  }\n});\n\nif (!global.exports && !global.module && (!global.define || !global.define.amd)) {\n  global.Formsy = Formsy;\n}\n\nmodule.exports = Formsy;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/main.js\n **/","module.exports = {\n  arraysDiffer: function (a, b) {\n    var isDifferent = false;\n    if (a.length !== b.length) {\n      isDifferent = true;\n    } else {\n      a.forEach(function (item, index) {\n        if (!this.isSame(item, b[index])) {\n          isDifferent = true;\n        }\n      }, this);\n    }\n    return isDifferent;\n  },\n\n  objectsDiffer: function (a, b) {\n    var isDifferent = false;\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      isDifferent = true;\n    } else {\n      Object.keys(a).forEach(function (key) {\n        if (!this.isSame(a[key], b[key])) {\n          isDifferent = true;\n        }\n      }, this);\n    }\n    return isDifferent;\n  },\n\n  isSame: function (a, b) {\n    if (typeof a !== typeof b) {\n      return false;\n    } else if (Array.isArray(a)) {\n      return !this.arraysDiffer(a, b);\n    } else if (typeof a === 'object' && a !== null && b !== null) {\n      return !this.objectsDiffer(a, b);\n    }\n\n    return a === b;\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/utils.js\n **/","var utils = require('./utils.js');\n\nvar convertValidationsToObject = function (validations) {\n\n  if (typeof validations === 'string') {\n\n    return validations.split(/\\,(?![^{\\[]*[}\\]])/g).reduce(function (validations, validation) {\n      var args = validation.split(':');\n      var validateMethod = args.shift();\n\n      args = args.map(function (arg) {\n        try {\n          return JSON.parse(arg);\n        } catch (e) {\n          return arg; // It is a string if it can not parse it\n        }\n      });\n\n      if (args.length > 1) {\n        throw new Error('Formsy does not support multiple args on string validations. Use object format of validations instead.');\n      }\n\n      validations[validateMethod] = args.length ? args[0] : true;\n      return validations;\n    }, {});\n\n  }\n\n  return validations || {};\n};\n\nmodule.exports = {\n  getInitialState: function () {\n    return {\n      _value: this.props.value,\n      _isRequired: false,\n      _isValid: true,\n      _isPristine: true,\n      _pristineValue: this.props.value,\n      _validationError: '',\n      _externalError: null,\n      _formSubmitted: false\n    };\n  },\n  getDefaultProps: function () {\n    return {\n      validationError: '',\n      validationErrors: {}\n    };\n  },\n\n  componentWillMount: function () {\n    var configure = function () {\n      this.setValidations(this.props.validations, this.props.required);\n      this.props._attachToForm(this);\n    }.bind(this);\n\n    if (!this.props.name) {\n      throw new Error('Form Input requires a name property when used');\n    }\n\n    if (!this.props._attachToForm) {\n      return setTimeout(function () {\n        if (!this.isMounted()) return;\n        if (!this.props._attachToForm) {\n          throw new Error('Form Mixin requires component to be nested in a Form');\n        }\n        configure();\n      }.bind(this), 0);\n    }\n    configure();\n  },\n\n  // We have to make the validate method is kept when new props are added\n  componentWillReceiveProps: function (nextProps) {\n    this.setValidations(nextProps.validations, nextProps.required);\n  },\n\n  componentDidUpdate: function (prevProps) {\n\n    // If the value passed has changed, set it. If value is not passed it will\n    // internally update, and this will never run\n    if (!utils.isSame(this.props.value, prevProps.value)) {\n      this.setValue(this.props.value);\n    }\n  },\n\n  // Detach it when component unmounts\n  componentWillUnmount: function () {\n    this.props._detachFromForm(this);\n  },\n\n  setValidations: function (validations, required) {\n\n    // Add validations to the store itself as the props object can not be modified\n    this._validations = convertValidationsToObject(validations) || {};\n    this._requiredValidations = required === true ? {isDefaultRequiredValue: true} : convertValidationsToObject(required);\n\n  },\n\n  // We validate after the value has been set\n  setValue: function (value) {\n    this.setState({\n      _value: value,\n      _isPristine: false\n    }, function () {\n      this.props._validate(this);\n    }.bind(this));\n  },\n  resetValue: function () {\n    this.setState({\n      _value: this.state._pristineValue,\n      _isPristine: true\n    }, function () {\n      this.props._validate(this);\n    });\n  },\n  getValue: function () {\n    return this.state._value;\n  },\n  hasValue: function () {\n    return this.state._value !== '';\n  },\n  getErrorMessage: function () {\n    return !this.isValid() || this.showRequired() ? (this.state._externalError || this.state._validationError) : null;\n  },\n  isFormDisabled: function () {\n    return this.props._isFormDisabled();\n  },\n  isValid: function () {\n    return this.state._isValid;\n  },\n  isPristine: function () {\n    return this.state._isPristine;\n  },\n  isFormSubmitted: function () {\n    return this.state._formSubmitted;\n  },\n  isRequired: function () {\n    return !!this.props.required;\n  },\n  showRequired: function () {\n    return this.state._isRequired;\n  },\n  showError: function () {\n    return !this.showRequired() && !this.isValid();\n  },\n  isValidValue: function (value) {\n    return this.props._isValidValue.call(null, this, value);\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/Mixin.js\n **/","var isExisty = function (value) {\n  return value !== null && value !== undefined;\n};\n\nvar isEmpty = function (value) {\n  return value === '';\n};\n\nvar validations = {\n  isDefaultRequiredValue: function (values, value) {\n    return value === undefined || value === '';\n  },\n  isExisty: function (values, value) {\n    return isExisty(value);\n  },\n  matchRegexp: function (values, value, regexp) {\n    return !isExisty(value) || isEmpty(value) || regexp.test(value);\n  },\n  isUndefined: function (values, value) {\n    return value === undefined;\n  },\n  isEmptyString: function (values, value) {\n    return isEmpty(value);\n  },\n  isEmail: function (values, value) {\n    return validations.matchRegexp(values, value, /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$/i);\n  },\n  isUrl: function (values, value) {\n    return validations.matchRegexp(values, value, /^(https?|s?ftp):\\/\\/(((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:)*@)?(((\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])\\.(\\d|[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5]))|((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?)(:\\d*)?)(\\/((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)+(\\/(([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)*)*)?)?(\\?((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|[\\uE000-\\uF8FF]|\\/|\\?)*)?(#((([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(%[\\da-f]{2})|[!\\$&'\\(\\)\\*\\+,;=]|:|@)|\\/|\\?)*)?$/i);\n  },\n  isTrue: function (values, value) {\n    return value === true;\n  },\n  isFalse: function (values, value) {\n    return value === false;\n  },\n  isNumeric: function (values, value) {\n    if (typeof value === 'number') {\n      return true;\n    }\n    return validations.matchRegexp(values, value, /^[-+]?(\\d*[.])?\\d+$/);\n  },\n  isAlpha: function (values, value) {\n    return validations.matchRegexp(values, value, /^[a-zA-Z]+$/);\n  },\n  isWords: function (values, value) {\n    return validations.matchRegexp(values, value, /^[a-zA-Z\\s]+$/);\n  },\n  isSpecialWords: function (values, value) {\n    return validations.matchRegexp(values, value, /^[a-zA-Z\\s\\u00C0-\\u017F]+$/);\n  },\n  isLength: function (values, value, length) {\n    return !isExisty(value) || isEmpty(value) || value.length === length;\n  },\n  equals: function (values, value, eql) {\n    return !isExisty(value) || isEmpty(value) || value == eql;\n  },\n  equalsField: function (values, value, field) {\n    return value == values[field];\n  },\n  maxLength: function (values, value, length) {\n    return !isExisty(value) || value.length <= length;\n  },\n  minLength: function (values, value, length) {\n    return !isExisty(value) || isEmpty(value) || value.length >= length;\n  }\n};\n\nmodule.exports = validations;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/validationRules.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_4__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"react\"\n ** module id = 4\n ** module chunks = 0\n **/"],"sourceRoot":""}